{
    "extends": [
      "airbnb",
      "prettier",
      "airbnb/hooks",
      "airbnb-typescript",
      "eslint:recommended",
      "@react-native-community",
      "plugin:react/recommended",
      "plugin:unicorn/recommended",
      "plugin:prettier/recommended",
      "plugin:react-hooks/recommended",
      "plugin:@typescript-eslint/recommended"
    ],
    "plugins": [
      "react",
      "unicorn",
      "react-hooks",
      "@typescript-eslint",
      "@typescript-eslint"
    ],
    "root": true,
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "project": "./tsconfig.json",
      "ecmaVersion": "latest",
      "ecmaFeatures": {
        "jsx": true
      }
    },
    "rules": {
      "global-require": "off",
      "react/react-in-jsx-scope": "off",
      "react/require-default-props": "off",
      "import/prefer-default-export": "off",
      "unicorn/prefer-module": "off",
      "unicorn/prefer-query-selector": "off",
      "import/no-namespace":"error",
      "unicorn/prevent-abbreviations": "off",
      "unicorn/no-array-for-each": "off",
      "@typescript-eslint/no-use-before-define": "off",
      "@typescript-eslint/default-param-last": "off",
      "@typescript-eslint/no-unused-expressions": "off",
      "react/function-component-definition": "off",
      "unicorn/no-null": "off",
      "import/no-extraneous-dependencies": ["error", { "devDependencies": true }],
      "react/jsx-props-no-spreading": "off",
      "prettier/prettier": [
        "error",
        {
          "endOfLine": "auto"
        }
      ],
      "@typescript-eslint/naming-convention": [
        "error",
        {
          "selector": ["enum", "enumMember"],
          "format": ["StrictPascalCase"]
        }
      ],
      "unicorn/filename-case": [
        "error",
        {
          "cases": {
            "camelCase": true,
            "pascalCase": true
          }
        }
      ],
         "no-restricted-syntax": [
              "error",
              {
                  "selector": "FunctionExpression",
                  "message": "Function expressions are not allowed."
              },
              {
                  "selector": "CallExpression[callee.name='setTimeout'][arguments.length!=2]",
                  "message": "setTimeout must always be invoked with two arguments."
              }
          ]
    }
  }
  